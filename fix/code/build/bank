#!/usr/bin/ruby
require 'optparse'
require 'socket'
require 'timeout'
require 'json'
require 'openssl'
require 'base64'

Signal.trap('INT')  { exit 0 } # Trap ^C      == "INT"
Signal.trap('TERM') { exit 0 } # Trap `Kill ` == "TERM"

DEBUG = false
EXIT_CODE  = 255
PROTOCOL_EXIT_CODE = 63

def generate_hash(value)
    OpenSSL::HMAC.hexdigest(
        OpenSSL::Digest.new('sha256'),
        $secret_key,
        value
    ).strip()
end

# Generator of 128-bit pseudo random numbers
# Returns number in hex format in a string
def generate_message_id()
    OpenSSL::Random.random_bytes(16).unpack("H*")[0]
end

def debug(msg)
  return false unless DEBUG
  flag = "a"
  flag = "w" unless File.exist?("debug.txt")

  File.open("debug.txt", flag) do |f|
    f << msg
  end
end

def encrypt(plain_text)
    cipher = OpenSSL::Cipher.new('aes-128-gcm')
    cipher.encrypt
    cipher.key = $secret_key
    iv = cipher.random_iv
    cipher.iv = iv
    ciphertext = cipher.update(plain_text) + cipher.final

    [ciphertext, iv, cipher.auth_tag].map{
        |x| Base64.strict_encode64(x) }.join(":")
end

def decrypt(text)
    ciphertext, iv, auth_tag = text.split(":").map{ |x| Base64.decode64(x) }
    cipher = OpenSSL::Cipher.new('aes-128-gcm')
    cipher.decrypt
    cipher.key = $secret_key
    cipher.iv = iv
    cipher.auth_tag = auth_tag
    cipher.update(ciphertext) + cipher.final 
end

# All other errors, specified throughout this document or
# unrecoverable errors not explicitly discussed, should prompt the
# program to exit with return code 255

# Numeric inputs are positive and provided in decimal without any
# leading 0's (should match /(0|[1-9][0-9]*)/). Thus "42" is a valid
# input number but the octal "052" or hexadecimal "0x2a" are not.
# Any reference to "number" below refers to this input specification.

def is_valid_balance?(balance, silent=0)
    # Balances and currency amounts are specified as a number
    # indicating a whole amount and a fractional input separated
    # by a period. The fractional input is in decimal and is always
    # two digits and thus can include a leading 0 (should match /[0-9]{2}/).
    # The interpretation of the fractional amount v is that of having
    # value equal to v/100 of a whole amount (akin to cents and dollars in
    # US currency). Balances are bounded from 0.00 to 4294967295.99.
    if balance =~ /^(\d{1,10}).(\d{2})$/
      left_part = balance.split(".")[0]
      if left_part == "0" || left_part[0] != "0"
        balance = balance.to_f
        if balance >= 0.0 && balance <= 4294967295.99
            return true
        end
      end
    end

    debug "Invalid balance: #{balance}" unless silent
    false
end

def is_valid_amount?(amount)
    # Uses the same validation as is_valid_balance?
    result = is_valid_balance?(amount, 1)
    debug "Invalid amount: #{amount}" unless result 

    return result
end

def is_valid_account?(account)
  if account.length >= 1 \
    && account.length <= 250 \
    && account =~ /\A[a-z0-9_\-\.]+\Z/
      return true
  end

  debug "Invalid account: #{account}"
  false
end

def is_valid_ip?(ip)
  unless ip =~ /\A([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})\z/
    debug "Invalid ip #{ip}"
    return false
  end

  if ["0.0.0.0","10.0.0.0","172.16.0.0","192.168.0.0"].include?(ip)
    debug "Invalid ip -- network address"
    return false
  end

  if ["255.255.255.255","10.255.255.255","172.31.255.255","192.168.255.255"].include?(ip)
    debug "Invalid ip -- broadcast address"
    return false
  end

  ip.split(".").each do |octect|
    if octect.start_with?("0") && octect.length > 1
      debug "Invalid ip -- cant start with 0"
      return false
    end

    if octect.to_i > 255
      debug "Invalid ip -- #{octect} cant be greater than 255"
      return false
    end
  end

  true
end

def is_valid_port?(port)
  # Regex check
  unless port =~ /\A([1-9]{1})([0-9]{3,4})\z/
    debug "Invalid port"
    return false
  end

  # p<1024 and p>65535 are invalid
  p = port.to_i
  if p >= 1024 && p <= 65535
    return true
  end
  
  debug "Invalid port: #{p}"
  false
end

def is_valid_auth_file?(auth_file, silent=0)
  if ![".",".."].include?(auth_file) \
    && auth_file.length >= 1 \
    && auth_file.length <= 255 \
    && auth_file =~ /\A[a-z0-9_\-\.]+\Z/
      return true
  end

  debug "Invalid auth file: #{auth_file}" unless silent
  false
end

def is_valid_card_file?(card_file)
  result = is_valid_auth_file?(card_file, 1)

  debug "Invalid card_file: #{card_file}" unless result 
  return result
end

def is_valid_message_id?(message_id)
  if message_id.length >= 1 \
    && message_id.length <= 255 \
    && message_id =~ /\A[a-z0-9_\-\.]+\Z/
      return true
  end

  debug "Invalid message_id: #{message_id}"
  false
end

def are_valid_args?(args, auth_file)
  # ATM time
  if !args[:message_id] || !is_valid_message_id?(args[:message_id])
    debug "are_valid_args? invalid message ID"
    return false
  end

  # Account Name
  if !args[:account] || !is_valid_account?(args[:account])
    debug "are_valid_args? invalid account"
    return false
  end

  # Card File
  if !args[:card_file] || !is_valid_card_file?(args[:card_file])
    debug "are_valid_args? invalid card file"
    return false
  end

  # Auth File
  if !args[:auth_file] || !is_valid_auth_file?(args[:auth_file]) || args[:auth_file]!=auth_file
    debug "are_valid_args? invalid auth file"
    return false
  end

  # Operations
  if !args[:operation] || !["-n","-d","-w","-g"].include?(args[:operation])
    debug "are_valid_args? invalid operation"
    return false
  end

  # -n
  if args[:operation] == "-n" && !is_valid_balance?(args[:operation_value])
    debug "are_valid_args? invalid balance for -n operation"
    return false
  end

  # -d, -w
  if ["-d","-w"].include?(args[:operation]) && !is_valid_amount?(args[:operation_value])
    debug "are_valid_args? invalid amount for operations -d or -w"
    return false
  end

  return true
end

def operation_n(args)
    unless balance(args[:auth_file], args[:account]).nil?
        return { :error => "Account already exists"}
    end

    unless add_entry(args[:auth_file], args[:account], "n", args[:operation_value], args[:message_id])
        return { :error => "Replay attack detected"}
    end

    {
        :account => args[:account].to_s,
        :initial_balance => args[:operation_value].to_f.round(2)
    }
end

def operation_d(args)
    b = balance(args[:auth_file], args[:account])
    return { :error => "Account not found"} if b.nil?

    unless add_entry(args[:auth_file], args[:account], "d", args[:operation_value], args[:message_id])
        return { :error => "Replay attack detected"}
    end

    {
        :account => args[:account].to_s,
        :deposit => args[:operation_value].to_f.round(2)
    }
end

def operation_w(args)
    b = balance(args[:auth_file], args[:account])
    return { :error => "Account not found"} if b.nil?

    if b - args[:operation_value].to_f < 0
        return { :error => "Invalid amount"}
    end

    unless add_entry(args[:auth_file], args[:account], "w", args[:operation_value], args[:message_id])
        return { :error => "Replay attack detected"}
    end

    {
        :account  => args[:account].to_s,
        :withdraw => args[:operation_value].to_f.round(2)
    }
end

def operation_g(args)
    b = balance(args[:auth_file], args[:account])
    return { :error => "Account not found"} if b.nil?

    unless add_entry(args[:auth_file], args[:account], "g", nil, args[:message_id])
        return { :error => "Replay attack detected"}
    end

    {
        :account => args[:account].to_s,
        :balance => b
    }
end

$entries = []

def add_entry(auth_file, user, operation, value, message_id)
    # Security Check
    # Verify duplicate (replay attack attempts)
    return false if $entries.include?([user, operation, value, message_id])

    # Add entry
    $entries << [user, operation, value, message_id]
    return true
end

def balance(auth_file, user)
    # return nil if user does not exist
    total = 0.0
    account_exists = false
    $entries.each do |values|
        if values[0] == user
            account_exists = true
            if ["n","d"].include?(values[1])
                total += values[2].to_f
            end

            if ["w"].include?(values[1])
                total -= values[2].to_f
            end
        end
    end

    return nil unless account_exists
    return total.round(2)
end

# bank is a server than simulates a bank, whose job is to keep track
# of the balance of its customers. It will receive communications
# from atm clients on the specified TCP port. Example interactions
# with bank and the atm are given at the bottom of the main page.

options = {}

optparse = OptionParser.new do |opts|  
  opts.banner = "Usage: bank [-p <port>] [-s <auth-file>]"
  opts.separator  ""
  opts.separator  "Options"

  text = "Help"
  opts.on("-h","--help",text) do |input|
    exit(EXIT_CODE)
  end

  text = "The port that bank should listen on. The default is 3000."
  opts.on("-p <port>","",text) do |input|
    exit(EXIT_CODE) unless is_valid_port?(input)
    options[:port] = input
  end

  text = "The name of the auth file. If not supplied, defaults to \"bank.auth\""
  opts.on("-s <auth-file>","",text) do |input|
    exit(EXIT_CODE) unless is_valid_auth_file?(input)
    options[:auth_file] = input
  end
end

begin
  optparse.parse!
rescue
  debug "invalid arguments #{options.inspect}"
  exit(EXIT_CODE)
end

# Check required conditions
unless ARGV.empty?
  debug "Extra parameters"
  exit(EXIT_CODE)
end

# Debug: print received options
debug options.inspect

# Default Parameters Values
port      = (options[:port]      || "3000").to_i
auth_file = options[:auth_file]  || "bank.auth"

# ...  if the specified file already exists,
# bank should exit with return code 255.
if File.exist?(auth_file)
  debug "File already exists: #{auth_file}"
  exit(EXIT_CODE)
end

# Once the auth file is written completely, 
# bank prints "created" (followed by a newline)
# to stdout. bank will not change the auth file
# once "created" has been printed.
$secret_key = OpenSSL::Cipher::AES256.new(:CBC).random_key
debug Base64.encode64($secret_key)

begin
  File.open(auth_file,  "w") do |f|
    f << Base64.encode64($secret_key) + "\n"
  end
  STDOUT.puts "created"
  STDOUT.flush
rescue Errno::EACCES
  debug "No permission to write file: #{auth_file}"
  exit(EXIT_CODE)
end

#
## Bank TCP Server
#
# If an error is detected in the protocol's communication,
# atm should exit with return code 63, while bank should
# print "protocol_error" to stdout (followed by a newline)
# and roll back (i.e., undo any changes made by) the current
# transaction.
server = TCPServer.new("127.0.0.1", port)
message_counter = 0
begin
  loop do
    begin
      begin
         client, client_sockaddr = server.accept_nonblock   # Wait for a client to connect
      rescue Errno::EAGAIN, Errno::ECONNABORTED, Errno::EINTR, Errno::EWOULDBLOCK
        IO.select([server])
        retry
      end
      
      Timeout::timeout(10) do
        client_input = client.gets  # Wait for a client input
        debug "received #{client_input}"

        # Decrypt
        begin
          client_input = decrypt(client_input)
        rescue => e
          debug "failed to decrypt: #{e.inspect}"
          client.puts encrypt({ :error => "failed to decrypt" }.to_json)
          client.close
          next
        end

        # Parse
        begin
          client_input = JSON.parse(client_input)
        rescue JSON::ParserError
          debug "failed to parse json"
          client.puts encrypt({ :error => "failed to parse" }.to_json)
          client.close
          next
        end

        # Verify Input
        if !client_input["input"] || !client_input["input"].is_a?(Array) || !client_input['input'][-2] == 'message_id'
            debug "invalid input"
            client.puts encrypt({ :error => "invalid input" }.to_json)
            client.close
            next
        end

        # Set message id
        message_id = client_input['input'].last

        # Extract arguments from client input
        args = {}
        client_input["input"].each_with_index do |v, index|
          key = nil

          case v
            when "message_id"
              key = "message_id"
            when "-a"
              key = "account"
            when "-c"
              key = "card_file"
            when "-s"
              key = "auth_file"
            when "-n", "-d", "-w", "-g"
              args[:operation] = v
              key = "operation_value" unless v=="-g"  # -g doesn't have a value
          end

          # Index check -- just to make sure that there is
          # a next value followed by the key. E.g.,
          # When the key is "-n" we supposed that there is
          # the next value, which will be amount for instance.
          # So we check if the index exists (index+1) as some
          # keys doesn't need indexes, such as "-g".
          if key && (index + 1 <= client_input["input"].count)
            args[:"#{key}"] = client_input["input"][index + 1]
          end
        end

        # Verify Input
        if !are_valid_args?(args, auth_file)
          debug "invalid args"
          client.puts encrypt({ :error => "invalid arguments" }.to_json)
          client.close
          next
        end

        # Execute Operations
        output = {}
        output[:body] = case args[:operation]
          when "-n"
            operation_n(args)
          when "-d"
            operation_d(args)
          when "-w"
            operation_w(args)
          when "-g"
            operation_g(args)
          else
            debug "invalid operation"
            debug "args: #{args}"
            client.puts encrypt({ :error => "invalid operation" }.to_json)
            client.close
            next
        end

        unless output[:body][:error]
          STDOUT.puts output[:body].to_json    # prints on console
          STDOUT.flush
        end
        
        output[:message_id] = message_id
        client.puts encrypt(output.to_json)    # prints on socket
        client.close
        message_id = nil
        next
      end

    rescue => e
      if (e.class == Timeout::Error)
         puts "protocol_error"
         STDOUT.flush
      else
        raise e
      end
    end
  end
rescue => e
  debug "generic error #{e.class}: #{e.message} \nBacktrace #{e.backtrace}"
  exit(EXIT_CODE)
end
